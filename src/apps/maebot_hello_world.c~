#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <unistd.h>
#include <pthread.h>
#include <string.h>
#include <math.h>
#include <signal.h>
#include <inttypes.h>

//lcm
#include <lcm/lcm.h>
#include "lcmtypes/maebot_motor_command_t.h"
#include "lcmtypes/maebot_targeting_laser_command_t.h"
#include "lcmtypes/maebot_leds_command_t.h"
#include "lcmtypes/maebot_sensor_data_t.h"
#include "lcmtypes/maebot_motor_feedback_t.h"
#include "lcmtypes/maebot_laser_scan_t.h"
#include "lcmtypes/maebot_motor_command_t.h"
#include "lcmtypes/maebot_motor_feedback_t.h" 

// common
#include "common/getopt.h"
#include "common/pg.h"
#include "common/zarray.h"
#include "common/timestamp.h"

// imagesource
#include "imagesource/image_u32.h"
#include "imagesource/image_source.h"
#include "imagesource/image_convert.h"
#include "eecs467_util.h" // This is where a lot of the internals livemovement

//camera
#include <gtk/gtk.h>
#include <gdk/gdkkeysyms.h>

#include "imagesource/image_u8x3.h"
//#include "image_source.h"
//#include "image_convert.h"
#include "imagesource/pnm.h"

#define MAX_REVERSE_SPEED -1.0f
#define MAX_FORWARD_SPEED 1.0f
#define CMD_PRD 50000 //us -> 20Hz
#define MTR_SPD 0.25f
#define MTR_STOP 0.0f


typedef struct state state_t;
struct state {
    //bool running;
    getopt_t *gopt;
//    parameter_gui_t *pg;

    // LCM
    lcm_t *lcm;
    const char *laser_channel;
    const char *corner_laser_channel;

	//camera
	char *url; //image_source url
	image_source_t *isrc;
	int fidx;

    // threads
    pthread_t lcm_thread;
    pthread_t drive_square_thread;

    pthread_mutex_t laser_mutex;
    pthread_mutex_t move_mutex;

	//maebot_laser_scan_t *laser_info;
    bool need_scan;
    bool need_init;

    // bot info
    double right_prev_dist;
    double left_prev_dist;

    double theta_0;
    double x_0;
    double y_0;

    double dist_edge; //total distance traveled alnog one edge

    bool turn; 
    int short_edge; //bool
    int eCount; //edge count, 12 edges = 3 rotations around square
    char move;

    double stop_turn_theta; //during turn compare to this
};

static void 
change_need_scan(bool value, state_t *state)
{
    pthread_mutex_lock(&(state->laser_mutex));
    state->need_scan = value;
    pthread_mutex_unlock(&(state->laser_mutex));
}

static void take_picture(state_t *state)
{
	printf("taking picture ... ");
	
	// take picture code (copy-past, don't know how it works)
	image_source_data_t *frmd;
	frmd = malloc(sizeof(image_source_data_t));
	image_u32_t * save_image = (image_u32_t*)state->isrc->get_frame(state->isrc, frmd);// might need to change casting
	save_image = image_convert_u32(frmd);
	
	char path[100];
	snprintf(path, 100, "/home/team2/eecs467/corner_shot_%d.ppm", state->eCount);
	
	
	image_u32_write_pnm(save_image, path); //this path can be changed
	state->isrc->release_frame(state->isrc,frmd);
	printf("image saved\n");
}

// save laser information to a different channel
static void
laser_handler (const lcm_recv_buf_t *rbuf,
                const char *channel,
                const maebot_laser_scan_t *msg,
                void *state_p)
{
    state_t *state = state_p;

    if (!state->need_scan)
        return;

    maebot_laser_scan_t_publish(state->lcm, state->corner_laser_channel, msg);
    printf("republished laser scan\n");

    printf("num_ranges: %d", msg->num_ranges);
    int i;
    for (i = 0; i < msg->num_ranges; ++i){
        printf("%6.3f %6.3f\n", msg->thetas[i], msg->ranges[i]);
    }

    change_need_scan(false, state);
}

static void
motor_feedback_handler (const lcm_recv_buf_t *rbuf, const char *channel,
                        const maebot_motor_feedback_t *msg, void *user)
{
    state_t *state = user;

    int res = system ("clear");
    if (res)
        printf ("system clear failed\n");

    char cur_move = 's';

    if (state->need_init){
        state->right_prev_dist = (msg->encoder_right_ticks/480.0) * 0.032 * 3.14;
        state->left_prev_dist = (msg->encoder_left_ticks/480.0) * 0.032 * 3.14;
        state->need_init = false;
    }

    //update the distance traveled since last timestep
    double cur_dist = (msg->encoder_right_ticks/480.0) * 0.032 * 3.14;
    double right_step = cur_dist - state->right_prev_dist;
    printf("cur_dist: prev_dist: right_step:\t%f\t%f\t%f\n", cur_dist, state->right_prev_dist, right_step);
    state->right_prev_dist = cur_dist;

    cur_dist = (msg->encoder_left_ticks/480.0) * 0.032 *3.14;
    double left_step = cur_dist - state->left_prev_dist;
    printf("cur_dist: prev_dist: left_step:\t%f\t%f\t%f\n", cur_dist, state->left_prev_dist, left_step);
    state->left_prev_dist = cur_dist;

    //odometry
    double s_ = (right_step + left_step)/2;
    double delta_theta = (right_step - left_step)/0.08;
    double alpha = delta_theta/2;
    double x = cos(state->theta_0 + alpha) * s_ + state->x_0; //tot dist traveled
    double y = sin(state->theta_0 + alpha) * s_ + state->y_0; //tot dist traveled
    double theta = delta_theta + state->theta_0;

	if (state->turn){ //making the turn       

       if (theta >= state->stop_turn_theta){ //stop turining
            state->turn = false; 
            cur_move = 'f'; 
        } else { //keep turning
            state->turn = true; 
            cur_move = 't'; 
        }
    } else { //traveling forward along an edge
        double ave_step = (right_step + left_step)/2; //ave dist of motors
        state->dist_edge = state->dist_edge + ave_step;

        printf("ave step:\t%f", ave_step);

        if( (state->dist_edge >= 0.6096) && state->short_edge) //short edge, 2ft
        {
            state->dist_edge = 0.0; 
            state->short_edge = 0; 
            state->eCount++;
            state->stop_turn_theta = theta + 1.57; 
			state->turn = true;
            cur_move = 's'; //data collect
			take_picture(state);
	   		change_need_scan(true, state); 

        } else if (state->dist_edge >= 0.9144 ){ //long edge, 3ft
            state->dist_edge = 0.0;
            state->short_edge = 1;
            state->eCount++;
            state->stop_turn_theta = theta + 1.57; 
			state->turn = true;
            cur_move = 's'; //data collect
			take_picture(state);
	   		change_need_scan(true, state); 

        } else { //continue along the edge
            state->turn = true;
            cur_move = 'f';
        }
    }

    //update Bot position
    state->theta_0 = theta;
    state->x_0 = x;
    state->y_0 = y;

    //3 loops, stop maebot
    if(state->eCount >= 12) 
        cur_move = 's';

    pthread_mutex_lock(&state->move_mutex);
    state->move = cur_move;
    pthread_mutex_unlock(&state->move_mutex);

    //print debug/info to screen
    printf ("utime: %"PRId64"\n", msg->utime);
    printf ("encoder_[left, right]_ticks:\t\t%d,\t%d\n",
            msg->encoder_left_ticks, msg->encoder_right_ticks);
    printf ("motor_current[left, right]:\t\t%d,\t%d\n",
            msg->motor_current_left, msg->motor_current_right);
    printf ("motor_[left, right]_commanded_speed:\t%f,\t%f\n",
            msg->motor_left_commanded_speed, msg->motor_right_commanded_speed);
    printf ("motor_[left, right]_actual_speed:\t%f,\t%f\n",
            msg->motor_left_commanded_speed, msg->motor_right_commanded_speed);

    printf("right step, left step\t\t%f\t%f\n", right_step, left_step);
    printf("theta, x, y\t(%f,%f,%f)\n", state->theta_0, state->x_0, state->y_0);

    printf("state_machine:\t\t%c\n", cur_move);
    printf("distance_along_edge:\t\t%f\n", state->dist_edge);
    printf("Edges:\t\t%d\n", state->eCount);
}

void *
receive_lcm_msg (void *data)
{
    state_t *state = data;

    maebot_laser_scan_t_subscribe (state->lcm,
                                   state->laser_channel,
                                   laser_handler,
                                   state);
    maebot_motor_feedback_t_subscribe(state->lcm, "MAEBOT_MOTOR_FEEDBACK",
                                      motor_feedback_handler, state);

    while (1) 
        lcm_handle_timeout (state->lcm, 1000/5);

    return NULL;
}

void * drive_square_loop (void *arg) {
    state_t *state = arg;
    uint64_t utime_start;

    while(1) {
        utime_start = utime_now ();
        maebot_motor_command_t msg;

        pthread_mutex_lock(&state->move_mutex);
        char cur_move = state->move;
        pthread_mutex_unlock(&state->move_mutex);

        //send movment commands to maebot
        switch(cur_move) {
            case 'f': //forward
            {
                msg.motor_left_speed = MTR_SPD;
                msg.motor_right_speed = MTR_SPD;
                break;
            }
            case 't': // left turn
            {
                msg.motor_left_speed = MTR_SPD * -1;
                msg.motor_right_speed = MTR_SPD;
                break;
            }
            case 's': //stop
            {
                msg.motor_left_speed = MTR_STOP;
                msg.motor_right_speed = MTR_STOP;
				usleep(2500000);
                break;
            }
            default:
                printf("error: undefined move type\n");
        }

        maebot_motor_command_t_publish (state->lcm, "MAEBOT_MOTOR_COMMAND", &msg);

        usleep (CMD_PRD - (utime_now() - utime_start));
    }

    return NULL;
}

state_t *
state_create (void)
{
    state_t *state = calloc (1, sizeof(*state));

    if (pthread_mutex_init (&state->laser_mutex, NULL)) {
        printf ("mutex init failed\n");
        exit(1);
    }

    if (pthread_mutex_init (&state->move_mutex, NULL)) {
        printf ("mutex init failed\n");
        exit(1);
    }

    state->lcm = lcm_create (NULL);

    printf ("utime,\t\tleft_ticks,\tright_ticks\n");

    //initilize bot
    state->theta_0 = 0.0;
    state->x_0 = 0.0;
    state->y_0 = 0.0;
    state->dist_edge = 0.0;
    state->turn = false; //false
    state->short_edge = 0; //false
    state->eCount = 0;
    state->stop_turn_theta = 0.0;
    state->move = 's';
    state->need_init = true;

    return state;
}

void state_destroy (state_t *state)
{
    if (!state)
        return;

    if (state->lcm)
        lcm_destroy(state->lcm);

    if (state->gopt)
        getopt_destroy (state->gopt);

    free (state);
}

int
main (int argc, char *argv[])
{
    //eecs467_init (argc, argv);
    state_t *state = state_create ();

    state->gopt = getopt_create ();
    getopt_add_bool (state->gopt, 'h', "help", 0, "Show help");
    getopt_add_string (state->gopt, '\0', "laser-channel", "MAEBOT_LASER_SCAN", "LCM laser channel");
    getopt_add_string (state->gopt, '\0', "corner-laser-channel", "CORNER_LASER_SCAN", "LCM corner laser channel");

    state->laser_channel = getopt_get_string (state->gopt, "laser-channel");
    state->corner_laser_channel = getopt_get_string (state->gopt, "corner-laser-channel");

    if (!getopt_parse(state->gopt, argc, argv, 1) || getopt_get_bool(state->gopt, "help")) {
        printf("Usage: %s [options]\n\n", argv[0]);
        getopt_do_usage(state->gopt);
        return 0;
    }

	const zarray_t *args = getopt_get_extra_args(state->gopt);
    if (zarray_size(args) > 0) {
        zarray_get(args, 0, &state->url);
    } else {
        zarray_t *urls = image_source_enumerate();

        printf("Cameras:\n");
        for (int i = 0; i < zarray_size(urls); i++) {
            char *url;
            zarray_get(urls, i, &url);
            printf("  %3d: %s\n", i, url);
        }

        if (zarray_size(urls) == 0) {
            printf("No cameras found.\n");
            exit(0);
        }
        zarray_get(urls, 0, &state->url);
    }

	state->isrc = image_source_open(state->url);
    if (state->isrc == NULL) {
        printf("Unable to open device %s\n", state->url);
        exit(-1);
    }

    image_source_t *isrc = state->isrc;

    if (isrc->start(isrc))
        exit(-1);

    state->fidx = isrc->get_current_format(isrc);

    change_need_scan(false, state);

    pthread_create (&state->lcm_thread, NULL, receive_lcm_msg, state);
    pthread_create (&state->drive_square_thread, NULL, drive_square_loop, state);


	//gtk_main();

    pthread_join (state->lcm_thread, NULL);
    pthread_join (state->drive_square_thread, NULL);

    state_destroy (state);

	return 0;
}

